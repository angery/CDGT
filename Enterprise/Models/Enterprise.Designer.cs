//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("Enterprise", "WB_DRIVER_FK", "DRIVER", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Enterprise.Models.DRIVER), "WAYBILL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Enterprise.Models.WAYBILL), true)]
[assembly: EdmRelationshipAttribute("Enterprise", "WB_TCO_FK", "TCO", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Enterprise.Models.TCO), "WAYBILL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Enterprise.Models.WAYBILL), true)]
[assembly: EdmRelationshipAttribute("Enterprise", "USERS_ROLES_FK", "ROLE", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Enterprise.Models.ROLE), "USER", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Enterprise.Models.USER), true)]

#endregion

namespace Enterprise.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class EnterpriseContainer : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект EnterpriseContainer, используя строку соединения из раздела "EnterpriseContainer" файла конфигурации приложения.
        /// </summary>
        public EnterpriseContainer() : base("name=EnterpriseContainer", "EnterpriseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта EnterpriseContainer.
        /// </summary>
        public EnterpriseContainer(string connectionString) : base(connectionString, "EnterpriseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта EnterpriseContainer.
        /// </summary>
        public EnterpriseContainer(EntityConnection connection) : base(connection, "EnterpriseContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DRIVER> DRIVERs
        {
            get
            {
                if ((_DRIVERs == null))
                {
                    _DRIVERs = base.CreateObjectSet<DRIVER>("DRIVERs");
                }
                return _DRIVERs;
            }
        }
        private ObjectSet<DRIVER> _DRIVERs;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TCO> TCOes
        {
            get
            {
                if ((_TCOes == null))
                {
                    _TCOes = base.CreateObjectSet<TCO>("TCOes");
                }
                return _TCOes;
            }
        }
        private ObjectSet<TCO> _TCOes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WAYBILL> WAYBILLS
        {
            get
            {
                if ((_WAYBILLS == null))
                {
                    _WAYBILLS = base.CreateObjectSet<WAYBILL>("WAYBILLS");
                }
                return _WAYBILLS;
            }
        }
        private ObjectSet<WAYBILL> _WAYBILLS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<USER> USERS
        {
            get
            {
                if ((_USERS == null))
                {
                    _USERS = base.CreateObjectSet<USER>("USERS");
                }
                return _USERS;
            }
        }
        private ObjectSet<USER> _USERS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ROLE> ROLES
        {
            get
            {
                if ((_ROLES == null))
                {
                    _ROLES = base.CreateObjectSet<ROLE>("ROLES");
                }
                return _ROLES;
            }
        }
        private ObjectSet<ROLE> _ROLES;

        #endregion
   
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DRIVERs. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDRIVERs(DRIVER dRIVER)
        {
            base.AddObject("DRIVERs", dRIVER);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TCOes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTCOes(TCO tCO)
        {
            base.AddObject("TCOes", tCO);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WAYBILLS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWAYBILLS(WAYBILL wAYBILL)
        {
            base.AddObject("WAYBILLS", wAYBILL);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet USERS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUSERS(USER uSER)
        {
            base.AddObject("USERS", uSER);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ROLES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToROLES(ROLE rOLE)
        {
            base.AddObject("ROLES", rOLE);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Enterprise", Name="DRIVER")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DRIVER : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DRIVER.
        /// </summary>
        /// <param name="nAME">Исходное значение свойства NAME.</param>
        /// <param name="dRIVER_ID">Исходное значение свойства DRIVER_ID.</param>
        public static DRIVER CreateDRIVER(global::System.String nAME, global::System.Int32 dRIVER_ID)
        {
            DRIVER dRIVER = new DRIVER();
            dRIVER.NAME = nAME;
            dRIVER.DRIVER_ID = dRIVER_ID;
            return dRIVER;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DRIVER_ID
        {
            get
            {
                return _DRIVER_ID;
            }
            set
            {
                if (_DRIVER_ID != value)
                {
                    OnDRIVER_IDChanging(value);
                    ReportPropertyChanging("DRIVER_ID");
                    _DRIVER_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DRIVER_ID");
                    OnDRIVER_IDChanged();
                }
            }
        }
        private global::System.Int32 _DRIVER_ID;
        partial void OnDRIVER_IDChanging(global::System.Int32 value);
        partial void OnDRIVER_IDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "WB_DRIVER_FK", "WAYBILL")]
        public EntityCollection<WAYBILL> WAYBILLS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WAYBILL>("Enterprise.WB_DRIVER_FK", "WAYBILL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WAYBILL>("Enterprise.WB_DRIVER_FK", "WAYBILL", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Enterprise", Name="ROLE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ROLE : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ROLE.
        /// </summary>
        /// <param name="rOLE_ID">Исходное значение свойства ROLE_ID.</param>
        public static ROLE CreateROLE(global::System.Int32 rOLE_ID)
        {
            ROLE rOLE = new ROLE();
            rOLE.ROLE_ID = rOLE_ID;
            return rOLE;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ROLE_NAME
        {
            get
            {
                return _ROLE_NAME;
            }
            set
            {
                OnROLE_NAMEChanging(value);
                ReportPropertyChanging("ROLE_NAME");
                _ROLE_NAME = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ROLE_NAME");
                OnROLE_NAMEChanged();
            }
        }
        private global::System.String _ROLE_NAME;
        partial void OnROLE_NAMEChanging(global::System.String value);
        partial void OnROLE_NAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ROLE_ID
        {
            get
            {
                return _ROLE_ID;
            }
            set
            {
                if (_ROLE_ID != value)
                {
                    OnROLE_IDChanging(value);
                    ReportPropertyChanging("ROLE_ID");
                    _ROLE_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ROLE_ID");
                    OnROLE_IDChanged();
                }
            }
        }
        private global::System.Int32 _ROLE_ID;
        partial void OnROLE_IDChanging(global::System.Int32 value);
        partial void OnROLE_IDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "USERS_ROLES_FK", "USER")]
        public EntityCollection<USER> USERS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<USER>("Enterprise.USERS_ROLES_FK", "USER");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<USER>("Enterprise.USERS_ROLES_FK", "USER", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Enterprise", Name="TCO")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TCO : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TCO.
        /// </summary>
        /// <param name="sTATE_NUMBER">Исходное значение свойства STATE_NUMBER.</param>
        public static TCO CreateTCO(global::System.String sTATE_NUMBER)
        {
            TCO tCO = new TCO();
            tCO.STATE_NUMBER = sTATE_NUMBER;
            return tCO;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STATE_NUMBER
        {
            get
            {
                return _STATE_NUMBER;
            }
            set
            {
                if (_STATE_NUMBER != value)
                {
                    OnSTATE_NUMBERChanging(value);
                    ReportPropertyChanging("STATE_NUMBER");
                    _STATE_NUMBER = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("STATE_NUMBER");
                    OnSTATE_NUMBERChanged();
                }
            }
        }
        private global::System.String _STATE_NUMBER;
        partial void OnSTATE_NUMBERChanging(global::System.String value);
        partial void OnSTATE_NUMBERChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AT_ID
        {
            get
            {
                return _AT_ID;
            }
            set
            {
                OnAT_IDChanging(value);
                ReportPropertyChanging("AT_ID");
                _AT_ID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AT_ID");
                OnAT_IDChanged();
            }
        }
        private global::System.String _AT_ID;
        partial void OnAT_IDChanging(global::System.String value);
        partial void OnAT_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MARK
        {
            get
            {
                return _MARK;
            }
            set
            {
                OnMARKChanging(value);
                ReportPropertyChanging("MARK");
                _MARK = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MARK");
                OnMARKChanged();
            }
        }
        private global::System.String _MARK;
        partial void OnMARKChanging(global::System.String value);
        partial void OnMARKChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MODEL
        {
            get
            {
                return _MODEL;
            }
            set
            {
                OnMODELChanging(value);
                ReportPropertyChanging("MODEL");
                _MODEL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MODEL");
                OnMODELChanged();
            }
        }
        private global::System.String _MODEL;
        partial void OnMODELChanging(global::System.String value);
        partial void OnMODELChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WEIGHT
        {
            get
            {
                return _WEIGHT;
            }
            set
            {
                OnWEIGHTChanging(value);
                ReportPropertyChanging("WEIGHT");
                _WEIGHT = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WEIGHT");
                OnWEIGHTChanged();
            }
        }
        private Nullable<global::System.Int32> _WEIGHT;
        partial void OnWEIGHTChanging(Nullable<global::System.Int32> value);
        partial void OnWEIGHTChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "WB_TCO_FK", "WAYBILL")]
        public EntityCollection<WAYBILL> WAYBILLS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WAYBILL>("Enterprise.WB_TCO_FK", "WAYBILL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WAYBILL>("Enterprise.WB_TCO_FK", "WAYBILL", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Enterprise", Name="USER")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class USER : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта USER.
        /// </summary>
        /// <param name="uSERNAME">Исходное значение свойства USERNAME.</param>
        public static USER CreateUSER(global::System.String uSERNAME)
        {
            USER uSER = new USER();
            uSER.USERNAME = uSERNAME;
            return uSER;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String USERNAME
        {
            get
            {
                return _USERNAME;
            }
            set
            {
                if (_USERNAME != value)
                {
                    OnUSERNAMEChanging(value);
                    ReportPropertyChanging("USERNAME");
                    _USERNAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("USERNAME");
                    OnUSERNAMEChanged();
                }
            }
        }
        private global::System.String _USERNAME;
        partial void OnUSERNAMEChanging(global::System.String value);
        partial void OnUSERNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PASSWORD
        {
            get
            {
                return _PASSWORD;
            }
            set
            {
                OnPASSWORDChanging(value);
                ReportPropertyChanging("PASSWORD");
                _PASSWORD = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PASSWORD");
                OnPASSWORDChanged();
            }
        }
        private global::System.String _PASSWORD;
        partial void OnPASSWORDChanging(global::System.String value);
        partial void OnPASSWORDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String USER_ID
        {
            get
            {
                return _USER_ID;
            }
            set
            {
                OnUSER_IDChanging(value);
                ReportPropertyChanging("USER_ID");
                _USER_ID = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("USER_ID");
                OnUSER_IDChanged();
            }
        }
        private global::System.String _USER_ID;
        partial void OnUSER_IDChanging(global::System.String value);
        partial void OnUSER_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ROLE_ID
        {
            get
            {
                return _ROLE_ID;
            }
            set
            {
                OnROLE_IDChanging(value);
                ReportPropertyChanging("ROLE_ID");
                _ROLE_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ROLE_ID");
                OnROLE_IDChanged();
            }
        }
        private Nullable<global::System.Int32> _ROLE_ID;
        partial void OnROLE_IDChanging(Nullable<global::System.Int32> value);
        partial void OnROLE_IDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "USERS_ROLES_FK", "ROLE")]
        public ROLE ROLE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLE>("Enterprise.USERS_ROLES_FK", "ROLE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLE>("Enterprise.USERS_ROLES_FK", "ROLE").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ROLE> ROLEReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ROLE>("Enterprise.USERS_ROLES_FK", "ROLE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ROLE>("Enterprise.USERS_ROLES_FK", "ROLE", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Enterprise", Name="WAYBILL")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WAYBILL : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WAYBILL.
        /// </summary>
        /// <param name="wAYBILL_ID">Исходное значение свойства WAYBILL_ID.</param>
        /// <param name="tCO">Исходное значение свойства TCO.</param>
        public static WAYBILL CreateWAYBILL(global::System.Int32 wAYBILL_ID, global::System.String tCO)
        {
            WAYBILL wAYBILL = new WAYBILL();
            wAYBILL.WAYBILL_ID = wAYBILL_ID;
            wAYBILL.TCO = tCO;
            return wAYBILL;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WAYBILL_ID
        {
            get
            {
                return _WAYBILL_ID;
            }
            set
            {
                if (_WAYBILL_ID != value)
                {
                    OnWAYBILL_IDChanging(value);
                    ReportPropertyChanging("WAYBILL_ID");
                    _WAYBILL_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WAYBILL_ID");
                    OnWAYBILL_IDChanged();
                }
            }
        }
        private global::System.Int32 _WAYBILL_ID;
        partial void OnWAYBILL_IDChanging(global::System.Int32 value);
        partial void OnWAYBILL_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TCO
        {
            get
            {
                return _TCO;
            }
            set
            {
                OnTCOChanging(value);
                ReportPropertyChanging("TCO");
                _TCO = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TCO");
                OnTCOChanged();
            }
        }
        private global::System.String _TCO;
        partial void OnTCOChanging(global::System.String value);
        partial void OnTCOChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DRIVER
        {
            get
            {
                return _DRIVER;
            }
            set
            {
                OnDRIVERChanging(value);
                ReportPropertyChanging("DRIVER");
                _DRIVER = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DRIVER");
                OnDRIVERChanged();
            }
        }
        private Nullable<global::System.Int32> _DRIVER;
        partial void OnDRIVERChanging(Nullable<global::System.Int32> value);
        partial void OnDRIVERChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> FUEL_GIVEN
        {
            get
            {
                return _FUEL_GIVEN;
            }
            set
            {
                OnFUEL_GIVENChanging(value);
                ReportPropertyChanging("FUEL_GIVEN");
                _FUEL_GIVEN = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FUEL_GIVEN");
                OnFUEL_GIVENChanged();
            }
        }
        private Nullable<global::System.Int16> _FUEL_GIVEN;
        partial void OnFUEL_GIVENChanging(Nullable<global::System.Int16> value);
        partial void OnFUEL_GIVENChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> FUEL_LOST
        {
            get
            {
                return _FUEL_LOST;
            }
            set
            {
                OnFUEL_LOSTChanging(value);
                ReportPropertyChanging("FUEL_LOST");
                _FUEL_LOST = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FUEL_LOST");
                OnFUEL_LOSTChanged();
            }
        }
        private Nullable<global::System.Int16> _FUEL_LOST;
        partial void OnFUEL_LOSTChanging(Nullable<global::System.Int16> value);
        partial void OnFUEL_LOSTChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MILEAGE_START
        {
            get
            {
                return _MILEAGE_START;
            }
            set
            {
                OnMILEAGE_STARTChanging(value);
                ReportPropertyChanging("MILEAGE_START");
                _MILEAGE_START = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MILEAGE_START");
                OnMILEAGE_STARTChanged();
            }
        }
        private Nullable<global::System.Int32> _MILEAGE_START;
        partial void OnMILEAGE_STARTChanging(Nullable<global::System.Int32> value);
        partial void OnMILEAGE_STARTChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MILEAGE_FINISH
        {
            get
            {
                return _MILEAGE_FINISH;
            }
            set
            {
                OnMILEAGE_FINISHChanging(value);
                ReportPropertyChanging("MILEAGE_FINISH");
                _MILEAGE_FINISH = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MILEAGE_FINISH");
                OnMILEAGE_FINISHChanged();
            }
        }
        private Nullable<global::System.Int32> _MILEAGE_FINISH;
        partial void OnMILEAGE_FINISHChanging(Nullable<global::System.Int32> value);
        partial void OnMILEAGE_FINISHChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                OnSTATUSChanging(value);
                ReportPropertyChanging("STATUS");
                _STATUS = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("STATUS");
                OnSTATUSChanged();
            }
        }
        private Nullable<global::System.Int32> _STATUS;
        partial void OnSTATUSChanging(Nullable<global::System.Int32> value);
        partial void OnSTATUSChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "WB_DRIVER_FK", "DRIVER")]
        public DRIVER DRIVER1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DRIVER>("Enterprise.WB_DRIVER_FK", "DRIVER").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DRIVER>("Enterprise.WB_DRIVER_FK", "DRIVER").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DRIVER> DRIVER1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DRIVER>("Enterprise.WB_DRIVER_FK", "DRIVER");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DRIVER>("Enterprise.WB_DRIVER_FK", "DRIVER", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Enterprise", "WB_TCO_FK", "TCO")]
        public TCO TCO1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TCO>("Enterprise.WB_TCO_FK", "TCO").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TCO>("Enterprise.WB_TCO_FK", "TCO").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TCO> TCO1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TCO>("Enterprise.WB_TCO_FK", "TCO");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TCO>("Enterprise.WB_TCO_FK", "TCO", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}