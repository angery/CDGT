//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("SupervisionModel", "ORG_CARGO_FK", "CARGO_TYPES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Supervision.Models.CargoType), "SPECIAL_PERMITS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Supervision.Models.SpecialPermit), true)]
[assembly: EdmRelationshipAttribute("SupervisionModel", "SP_ORG_FK", "ORGANIZATIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Supervision.Models.Organization), "SPECIAL_PERMITS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Supervision.Models.SpecialPermit), true)]

#endregion

namespace Supervision.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class SupervisionEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект SupervisionEntities, используя строку соединения из раздела "SupervisionEntities" файла конфигурации приложения.
        /// </summary>
        public SupervisionEntities() : base("name=SupervisionEntities", "SupervisionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SupervisionEntities.
        /// </summary>
        public SupervisionEntities(string connectionString) : base(connectionString, "SupervisionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SupervisionEntities.
        /// </summary>
        public SupervisionEntities(EntityConnection connection) : base(connection, "SupervisionEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CargoType> CARGO_TYPES
        {
            get
            {
                if ((_CARGO_TYPES == null))
                {
                    _CARGO_TYPES = base.CreateObjectSet<CargoType>("CARGO_TYPES");
                }
                return _CARGO_TYPES;
            }
        }
        private ObjectSet<CargoType> _CARGO_TYPES;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<LogItem> LOGGER_UGADN
        {
            get
            {
                if ((_LOGGER_UGADN == null))
                {
                    _LOGGER_UGADN = base.CreateObjectSet<LogItem>("LOGGER_UGADN");
                }
                return _LOGGER_UGADN;
            }
        }
        private ObjectSet<LogItem> _LOGGER_UGADN;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Organization> ORGANIZATIONS
        {
            get
            {
                if ((_ORGANIZATIONS == null))
                {
                    _ORGANIZATIONS = base.CreateObjectSet<Organization>("ORGANIZATIONS");
                }
                return _ORGANIZATIONS;
            }
        }
        private ObjectSet<Organization> _ORGANIZATIONS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SpecialPermit> SPECIAL_PERMITS
        {
            get
            {
                if ((_SPECIAL_PERMITS == null))
                {
                    _SPECIAL_PERMITS = base.CreateObjectSet<SpecialPermit>("SPECIAL_PERMITS");
                }
                return _SPECIAL_PERMITS;
            }
        }
        private ObjectSet<SpecialPermit> _SPECIAL_PERMITS;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<User> USERS
        {
            get
            {
                if ((_USERS == null))
                {
                    _USERS = base.CreateObjectSet<User>("USERS");
                }
                return _USERS;
            }
        }
        private ObjectSet<User> _USERS;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CARGO_TYPES. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCARGO_TYPES(CargoType cargoType)
        {
            base.AddObject("CARGO_TYPES", cargoType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet LOGGER_UGADN. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToLOGGER_UGADN(LogItem logItem)
        {
            base.AddObject("LOGGER_UGADN", logItem);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ORGANIZATIONS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToORGANIZATIONS(Organization organization)
        {
            base.AddObject("ORGANIZATIONS", organization);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SPECIAL_PERMITS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSPECIAL_PERMITS(SpecialPermit specialPermit)
        {
            base.AddObject("SPECIAL_PERMITS", specialPermit);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet USERS. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUSERS(User user)
        {
            base.AddObject("USERS", user);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SupervisionModel", Name="CargoType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CargoType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CargoType.
        /// </summary>
        /// <param name="cODE">Исходное значение свойства CODE.</param>
        public static CargoType CreateCargoType(global::System.Int32 cODE)
        {
            CargoType cargoType = new CargoType();
            cargoType.CODE = cODE;
            return cargoType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CODE
        {
            get
            {
                return _CODE;
            }
            set
            {
                if (_CODE != value)
                {
                    OnCODEChanging(value);
                    ReportPropertyChanging("CODE");
                    _CODE = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CODE");
                    OnCODEChanged();
                }
            }
        }
        private global::System.Int32 _CODE;
        partial void OnCODEChanging(global::System.Int32 value);
        partial void OnCODEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SupervisionModel", "ORG_CARGO_FK", "SPECIAL_PERMITS")]
        public EntityCollection<SpecialPermit> SPECIAL_PERMITS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SpecialPermit>("SupervisionModel.ORG_CARGO_FK", "SPECIAL_PERMITS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SpecialPermit>("SupervisionModel.ORG_CARGO_FK", "SPECIAL_PERMITS", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SupervisionModel", Name="LogItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LogItem : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта LogItem.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static LogItem CreateLogItem(global::System.Decimal id)
        {
            LogItem logItem = new LogItem();
            logItem.ID = id;
            return logItem;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MESSAGE
        {
            get
            {
                return _MESSAGE;
            }
            set
            {
                OnMESSAGEChanging(value);
                ReportPropertyChanging("MESSAGE");
                _MESSAGE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MESSAGE");
                OnMESSAGEChanged();
            }
        }
        private global::System.String _MESSAGE;
        partial void OnMESSAGEChanging(global::System.String value);
        partial void OnMESSAGEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Decimal _ID;
        partial void OnIDChanging(global::System.Decimal value);
        partial void OnIDChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SupervisionModel", Name="Organization")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Organization : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Organization.
        /// </summary>
        /// <param name="oRGANIZATION_ID">Исходное значение свойства ORGANIZATION_ID.</param>
        public static Organization CreateOrganization(global::System.Int32 oRGANIZATION_ID)
        {
            Organization organization = new Organization();
            organization.ORGANIZATION_ID = oRGANIZATION_ID;
            return organization;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ORGANIZATION_ID
        {
            get
            {
                return _ORGANIZATION_ID;
            }
            set
            {
                if (_ORGANIZATION_ID != value)
                {
                    OnORGANIZATION_IDChanging(value);
                    ReportPropertyChanging("ORGANIZATION_ID");
                    _ORGANIZATION_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ORGANIZATION_ID");
                    OnORGANIZATION_IDChanged();
                }
            }
        }
        private global::System.Int32 _ORGANIZATION_ID;
        partial void OnORGANIZATION_IDChanging(global::System.Int32 value);
        partial void OnORGANIZATION_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TITLE
        {
            get
            {
                return _TITLE;
            }
            set
            {
                OnTITLEChanging(value);
                ReportPropertyChanging("TITLE");
                _TITLE = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TITLE");
                OnTITLEChanged();
            }
        }
        private global::System.String _TITLE;
        partial void OnTITLEChanging(global::System.String value);
        partial void OnTITLEChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SupervisionModel", "SP_ORG_FK", "SPECIAL_PERMITS")]
        public EntityCollection<SpecialPermit> SPECIAL_PERMITS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SpecialPermit>("SupervisionModel.SP_ORG_FK", "SPECIAL_PERMITS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SpecialPermit>("SupervisionModel.SP_ORG_FK", "SPECIAL_PERMITS", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SupervisionModel", Name="SpecialPermit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SpecialPermit : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SpecialPermit.
        /// </summary>
        /// <param name="sP_ID">Исходное значение свойства SP_ID.</param>
        /// <param name="oRGANIZATION_ID">Исходное значение свойства ORGANIZATION_ID.</param>
        /// <param name="rOUTE_DESCRIPTION">Исходное значение свойства ROUTE_DESCRIPTION.</param>
        /// <param name="sTART_DATE">Исходное значение свойства START_DATE.</param>
        /// <param name="fINISH_DATE">Исходное значение свойства FINISH_DATE.</param>
        /// <param name="cARGO_TYPE">Исходное значение свойства CARGO_TYPE.</param>
        public static SpecialPermit CreateSpecialPermit(global::System.Int32 sP_ID, global::System.Int32 oRGANIZATION_ID, global::System.String rOUTE_DESCRIPTION, global::System.DateTime sTART_DATE, global::System.DateTime fINISH_DATE, global::System.Int32 cARGO_TYPE)
        {
            SpecialPermit specialPermit = new SpecialPermit();
            specialPermit.SP_ID = sP_ID;
            specialPermit.ORGANIZATION_ID = oRGANIZATION_ID;
            specialPermit.ROUTE_DESCRIPTION = rOUTE_DESCRIPTION;
            specialPermit.START_DATE = sTART_DATE;
            specialPermit.FINISH_DATE = fINISH_DATE;
            specialPermit.CARGO_TYPE = cARGO_TYPE;
            return specialPermit;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SP_ID
        {
            get
            {
                return _SP_ID;
            }
            set
            {
                if (_SP_ID != value)
                {
                    OnSP_IDChanging(value);
                    ReportPropertyChanging("SP_ID");
                    _SP_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SP_ID");
                    OnSP_IDChanged();
                }
            }
        }
        private global::System.Int32 _SP_ID;
        partial void OnSP_IDChanging(global::System.Int32 value);
        partial void OnSP_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ORGANIZATION_ID
        {
            get
            {
                return _ORGANIZATION_ID;
            }
            set
            {
                OnORGANIZATION_IDChanging(value);
                ReportPropertyChanging("ORGANIZATION_ID");
                _ORGANIZATION_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ORGANIZATION_ID");
                OnORGANIZATION_IDChanged();
            }
        }
        private global::System.Int32 _ORGANIZATION_ID;
        partial void OnORGANIZATION_IDChanging(global::System.Int32 value);
        partial void OnORGANIZATION_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ROUTE_DESCRIPTION
        {
            get
            {
                return _ROUTE_DESCRIPTION;
            }
            set
            {
                OnROUTE_DESCRIPTIONChanging(value);
                ReportPropertyChanging("ROUTE_DESCRIPTION");
                _ROUTE_DESCRIPTION = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ROUTE_DESCRIPTION");
                OnROUTE_DESCRIPTIONChanged();
            }
        }
        private global::System.String _ROUTE_DESCRIPTION;
        partial void OnROUTE_DESCRIPTIONChanging(global::System.String value);
        partial void OnROUTE_DESCRIPTIONChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime START_DATE
        {
            get
            {
                return _START_DATE;
            }
            set
            {
                OnSTART_DATEChanging(value);
                ReportPropertyChanging("START_DATE");
                _START_DATE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("START_DATE");
                OnSTART_DATEChanged();
            }
        }
        private global::System.DateTime _START_DATE;
        partial void OnSTART_DATEChanging(global::System.DateTime value);
        partial void OnSTART_DATEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FINISH_DATE
        {
            get
            {
                return _FINISH_DATE;
            }
            set
            {
                OnFINISH_DATEChanging(value);
                ReportPropertyChanging("FINISH_DATE");
                _FINISH_DATE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FINISH_DATE");
                OnFINISH_DATEChanged();
            }
        }
        private global::System.DateTime _FINISH_DATE;
        partial void OnFINISH_DATEChanging(global::System.DateTime value);
        partial void OnFINISH_DATEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CARGO_TYPE
        {
            get
            {
                return _CARGO_TYPE;
            }
            set
            {
                OnCARGO_TYPEChanging(value);
                ReportPropertyChanging("CARGO_TYPE");
                _CARGO_TYPE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CARGO_TYPE");
                OnCARGO_TYPEChanged();
            }
        }
        private global::System.Int32 _CARGO_TYPE;
        partial void OnCARGO_TYPEChanging(global::System.Int32 value);
        partial void OnCARGO_TYPEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> STATUS
        {
            get
            {
                return _STATUS;
            }
            set
            {
                OnSTATUSChanging(value);
                ReportPropertyChanging("STATUS");
                _STATUS = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("STATUS");
                OnSTATUSChanged();
            }
        }
        private Nullable<global::System.Int16> _STATUS;
        partial void OnSTATUSChanging(Nullable<global::System.Int16> value);
        partial void OnSTATUSChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TRIPS_COUNT
        {
            get
            {
                return _TRIPS_COUNT;
            }
            set
            {
                OnTRIPS_COUNTChanging(value);
                ReportPropertyChanging("TRIPS_COUNT");
                _TRIPS_COUNT = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TRIPS_COUNT");
                OnTRIPS_COUNTChanged();
            }
        }
        private Nullable<global::System.Int32> _TRIPS_COUNT;
        partial void OnTRIPS_COUNTChanging(Nullable<global::System.Int32> value);
        partial void OnTRIPS_COUNTChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SupervisionModel", "ORG_CARGO_FK", "CARGO_TYPES")]
        public CargoType CARGO_TYPES
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CargoType>("SupervisionModel.ORG_CARGO_FK", "CARGO_TYPES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CargoType>("SupervisionModel.ORG_CARGO_FK", "CARGO_TYPES").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CargoType> CARGO_TYPESReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CargoType>("SupervisionModel.ORG_CARGO_FK", "CARGO_TYPES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CargoType>("SupervisionModel.ORG_CARGO_FK", "CARGO_TYPES", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SupervisionModel", "SP_ORG_FK", "ORGANIZATIONS")]
        public Organization ORGANIZATION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("SupervisionModel.SP_ORG_FK", "ORGANIZATIONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("SupervisionModel.SP_ORG_FK", "ORGANIZATIONS").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Organization> ORGANIZATIONReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("SupervisionModel.SP_ORG_FK", "ORGANIZATIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Organization>("SupervisionModel.SP_ORG_FK", "ORGANIZATIONS", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SupervisionModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта User.
        /// </summary>
        /// <param name="uSERNAME">Исходное значение свойства USERNAME.</param>
        public static User CreateUser(global::System.String uSERNAME)
        {
            User user = new User();
            user.USERNAME = uSERNAME;
            return user;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String USERNAME
        {
            get
            {
                return _USERNAME;
            }
            set
            {
                if (_USERNAME != value)
                {
                    OnUSERNAMEChanging(value);
                    ReportPropertyChanging("USERNAME");
                    _USERNAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("USERNAME");
                    OnUSERNAMEChanged();
                }
            }
        }
        private global::System.String _USERNAME;
        partial void OnUSERNAMEChanging(global::System.String value);
        partial void OnUSERNAMEChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PASSWORD
        {
            get
            {
                return _PASSWORD;
            }
            set
            {
                OnPASSWORDChanging(value);
                ReportPropertyChanging("PASSWORD");
                _PASSWORD = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PASSWORD");
                OnPASSWORDChanged();
            }
        }
        private global::System.String _PASSWORD;
        partial void OnPASSWORDChanging(global::System.String value);
        partial void OnPASSWORDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();

        #endregion
    
    }

    #endregion
    
}
